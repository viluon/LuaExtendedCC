//Completions for the os API
{
  "scope": "source.luaecc - string",
  "completions": [
			{
			"trigger": "os_version()",
			"contents": "os.version()"
		},
		{
			"trigger": "os_getComputerID()",
			"contents": "os.getComputerID()"
		},
		{
			"trigger": "os_getComputerLabel()",
			"contents": "os.getComputerLabel()"
		},
		{
			"trigger": "os_setComputerLabel()",
			"contents": "os.setComputerLabel()"
		},
		{
			"trigger": "os_run( environment, programpath, arguments )",
			"contents": "os.run( ${1:environment}, ${2:programpath}, ${3:arguments} )"
		},
		{
			"trigger": "os_loadAPI( path )",
			"contents": "os.loadAPI( ${1:path} )"
		},
		{
			"trigger": "os_unloadAPI( name )",
			"contents": "os.unloadAPI( ${1:name} )"
		},
		{
			"trigger": "os_pullEvent( [filter] )",
			"contents": "os.pullEvent( ${1:[filter]} )"
		},
		{
			"trigger": "os_queueEvent( event, arguments )",
			"contents": "os.queueEvent( ${1:event}, ${2:arguments} )"
		},
		{
			"trigger": "os_clock()",
			"contents": "os.clock()"
		},
		{
			"trigger": "os_startTimer( timeout )",
			"contents": "os.startTimer( ${1:timeout} )"
		},
		{
			"trigger": "os_cancelTimer( token )",
			"contents": "os.cancelTimer( ${1:token} )"
		},
		{
			"trigger": "os_sleep( timeout )",
			"contents": "os.sleep( ${1:timeout} )"
		},
		{
			"trigger": "os_time()",
			"contents": "os.time()"
		},
		{
			"trigger": "os_day()",
			"contents": "os.day()"
		},
		{
			"trigger": "os_setAlarm( time )",
			"contents": "os.setAlarm( ${1:time} )"
		},
		{
			"trigger": "os_cancelAlarm( token )",
			"contents": "os.cancelAlarm( ${1:token} )"
		},
		{
			"trigger": "os_shutdown()",
			"contents": "os.shutdown()"
		},
		{
			"trigger": "os_reboot()",
			"contents": "os.reboot()"
		}

  ]
}
